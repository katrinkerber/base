/* 
==========================================================================
SASS VARIABLES, MIXINS, PLACEHOLDERS
-Colours
-Font families
-REM mixin
-Opactiy mixin
-Media query mixin
-Reverse visuallyhidden mixin
-Hover states mixin
-Clearfix placeholder
========================================================================== */

/* 
Colours */

/* 
Font families */


/* 
REM mixin
Adapted from https://github.com/bitmanic/rem/blob/master/stylesheets/_rem.scss
rem(font-size, 28px) will return:
font-size: 28px;
font-size: 1.75rem; */
$basesize-px: 16px;
@mixin rem($property, $values) {
  // Create empty lists that we can dump values into
  $px-values: ();
  $rem-values: ();
  // Loop through each value and put into px and rem lists
  @each $value in $values {
    // if value is 0 or not a numerical value (i.e. auto), return as is
    @if $value == 0 or type-of( $value ) != "number" {
      $px-values: append($px-values, $value);
      $rem-values: append($rem-values, $value); 
    } @else {   
      $px-values: append($px-values, $value );
      $rem-values: append($rem-values, ($value/$basesize-px) * 1rem );
    }
  }
  // Return the property and its list of converted values
  #{$property}: $px-values;
  #{$property}: $rem-values;
}

/* 
Opacity mixin */
@mixin opacity($opacity) { 
  opacity: $opacity;
  $opacityIE: $opacity * 100; filter: alpha(opacity=$opacityIE); /* <= IE8 */ 
}

/* 
Media query mixin 
Adapted from http://blog.grayghostvisuals.com/sass/sass-media-query-mixin/
Examples:
@include media-query(min, 704px) {}
@include media-query(max, 704px) {}
@include media-query(min-max, 360px, 859px) {} */
@mixin media-query($constraint, $breakpoint1, $breakpoint2: null) {
  @if $constraint == "min" {
    $emBreakpoint: ($breakpoint1 / 16px) * 1em ;
    @media only screen and (min-width: $emBreakpoint) {
      @content;
    }
  } @else if $constraint == "max" {
    $emBreakpoint: ($breakpoint1 / 16px) * 1em ;
    @media only screen and (max-width: $emBreakpoint) {
      @content;
    }
  } @else if $constraint == "min-max" {
    $emBreakpoint1: ($breakpoint1 / 16px) * 1em ;
    $emBreakpoint2: ($breakpoint2 / 16px) * 1em ;
    @media only screen and (min-width: $emBreakpoint1) and (max-width: $emBreakpoint2) {
      @content;
    }
  }
}

/* 
Reverse visuallyhidden mixin
reverses the .visuallyhidden helper class properties */
@mixin reverse-visuallyhidden {
  position: static;
  overflow: auto;
  width: auto;
  height: auto;
  margin: 0;
  clip: auto;
}

/*
Hover states mixin */
@mixin hover-states {
  &:hover, &:focus, &:active {
    @content;
  }
}

/* 
Clearfix Placeholder */
%clearfix {
  *zoom: 1;
  &:after {
      content: " ";
      display: table;
      clear: both;
  }
}
